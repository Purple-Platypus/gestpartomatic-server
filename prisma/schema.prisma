// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id              String          @id @default(uuid())
  email           String          @unique
  username        String          @unique
  nickname        String?
  avatar          String
  password        String
  settingDarkMode Boolean         @default(false)
  refreshToken    String?
  createdTodos    Todo[]
  assignedTodos   UsersOnTodos[]
  createdBoards   Board[]
  watchedBoards   UsersOnBoards[]
  comments        Comment[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  deletedAt       DateTime?
}

model Board {
  id          Int             @id @default(autoincrement())
  name        String
  description String?
  isPrivate   Boolean         @default(true)
  creator     User            @relation(fields: [creatorId], references: [id])
  creatorId   String
  watchers    UsersOnBoards[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  deletedAt   DateTime?
  lists       List[]
}

model UsersOnBoards {
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  board     Board     @relation(fields: [boardId], references: [id])
  boardId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([userId, boardId])
}

model List {
  id          Int         @id @default(autoincrement())
  name        String
  rank        Int
  progression Progression @default(TODO)
  board       Board       @relation(fields: [boardId], references: [id])
  boardId     Int
  todos       Todo[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

model Todo {
  id          Int            @id @default(autoincrement())
  rank        Int
  title       String
  description String?
  milestone   Milestone?     @relation(fields: [milestoneId], references: [id])
  deadline    DateTime?
  priority    Priority?      @default(NORMAL)
  isDone      Boolean        @default(false)
  isPrivate   Boolean        @default(false)
  isArchived  Boolean        @default(false)
  list        List?          @relation(fields: [listId], references: [id])
  listId      Int?
  author      User           @relation(fields: [authorId], references: [id])
  authorId    String
  assignees   UsersOnTodos[]
  tags        TagsOnTodos[]
  comments    Comment[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  milestoneId Int?
}

model UsersOnTodos {
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  todo      Todo      @relation(fields: [todoId], references: [id])
  todoId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([userId, todoId])
}

model Comment {
  id        Int       @id @default(autoincrement())
  comment   String
  todo      Todo      @relation(fields: [todoId], references: [id])
  todoId    Int
  user      User      @relation(fields: [userId], references: [id])
  userId    String
  rank      Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Tag {
  id        Int           @id @default(autoincrement())
  label     String
  color     Int
  todos     TagsOnTodos[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  deletedAt DateTime?
}

model TagsOnTodos {
  tag       Tag       @relation(fields: [tagId], references: [id])
  tagId     Int
  todo      Todo      @relation(fields: [todoId], references: [id])
  todoId    Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  @@id([tagId, todoId])
}

model Milestone {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  todos       Todo[]
}

model Flux1 {
  id          Int       @id @default(autoincrement())
  article     Int
  position    Int
  nature      TypeFlux1
  length      Int
  required    Boolean   @default(false)
  label       String?
  description String?
  a           Boolean?
  c           Boolean?
  db_column   String?
  comment     String?
}

enum Progression {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority {
  NORMAL
  HIGH
}

enum TypeFlux1 {
  STRING
  INT
}
